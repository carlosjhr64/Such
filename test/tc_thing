#! ruby
require 'stringio'
require 'test/unit'
require 'such/thing'
# Clear PARAMETERS of any defaults
Such::Thing::PARAMETERS.to_h.clear
# Set INTOS to use :pack or :add
Such::Thing::INTOS.replace [:pack, :add]

###########################
### Main Parent Classes ###
###########################

class ParentClass
  attr_reader :done, :added, :signals

  # ParentClass takes no arguments.
  def initialize
    @done = []
    @added = []
    @signals = []
  end

  # Has some method "does"
  def does(x)
    @done.push(x)
  end

  # Supports "add".
  def add(*stuff)
    @added.push(*stuff)
  end

  # And has some way to signal_connect.
  def signal_connect(string)
    @signals.push(string)
  end
end

class OneClass < ParentClass
  attr_reader :one
  alias :v :one

  # OneClass has arity one.
  def initialize(one)
    super()
    @one = one
  end
end

class ManyClass < ParentClass
  attr_reader :many
  alias :v :many

  # ManyClass can take my arguments
  def initialize(*many)
    super()
    @many = many
  end
end

#########################
### Test Such Classes ###
#########################

# arity 0
class SuchClass < ParentClass
  include Such::Thing
end

# arity 1
class OneSuchClass < OneClass
  include Such::Thing
end

# arity -1
class ManySuchClass < ManyClass
  include Such::Thing
end

# arity 0 pack
class PackSuchClass < ParentClass
  include Such::Thing
  attr_reader :packed
  def initialize(*parameters)
    super(*parameters)
    @packed = []
  end
  def pack(p)
    @packed.push(p)
  end
end

class TestThing < Test::Unit::TestCase
  def self.capture_stderr
    out = StringIO.new
    $stderr = out
    yield
    return out.string
  ensure
    $stderr = STDERR
  end

  def test_parameters
    # I Haz PARAMETERS
    assert_nothing_raised() do
      p = Such::Thing::PARAMETERS
      assert_equal(p.class, Proc)
      assert_equal(p.to_h.class, Hash)
    end
  end

  def test_configure
    assert_nothing_raised() do
      p = Such::Thing::PARAMETERS
      p.to_h.clear
      Such::Thing.configure(
        a: 'A',
        b: 'B',
        c: 'C',
      )
      assert_equal({a:'A',b:'B',c:'C'}, p.to_h)
      p.to_h.clear
    end
  end

  def test_trace_method
    assert_nothing_raised() do
      a = []; m = :puts; v = [1,2,3]
      out = TestThing.capture_stderr{ Such::Thing.trace_method(a,m,v) }
      assert_equal("Array#puts(1,2,3)\n", out)
    end
  end

  def test_trace_signal
    assert_nothing_raised() do
      a = {}; s = 'Keys'
      out = TestThing.capture_stderr{ Such::Thing.trace_signal(a,s) }
      assert_equal("Hash links Keys\n", out)
    end
  end

  def test_do_symbol
    assert_nothing_raised() do
      p = Such::Thing::PARAMETERS
      h = p.to_h
      h.clear

      h[:A]=[1,2,3]; h[:a]='a'; h[:a!]=[:A,:a,'a']

      x = ['b','c']
      out = TestThing.capture_stderr{ Such::Thing.do_symbol(:a, x) }
      assert_equal('', out)
      assert_equal(['a','b','c'], x)

      x = ['b','c']
      out = TestThing.capture_stderr{ Such::Thing.do_symbol(:A, x) }
      assert_equal('', out)
      assert_equal([[1,2,3],'b','c'], x)

      x = ['b','c']
      out = TestThing.capture_stderr{ Such::Thing.do_symbol(:a!, x) }
      assert_equal('', out)
      assert_equal([:A,:a,'a','b','c'], x)

      x = ['b','c']
      out = TestThing.capture_stderr{ Such::Thing.do_symbol(:k, x) }
      assert_match(/^Warning:/, out)
      assert_equal(['b','c'], x)

      # When :symbol! is not set, it does *[:SYMBOL, :symbol].
      x = ['b','c']
      out = TestThing.capture_stderr{ Such::Thing.do_symbol(:b!, x) }
      assert_equal('', out)
      assert_equal([:B,:b,'b','c'], x)

      h.clear
    end
  end

  def test_do_parameters
    assert_nothing_raised() do
      p = Such::Thing::PARAMETERS
      h = p.to_h
      h.clear
      h[:A]=[1,2,3]; h[:a]={a:'a'}; h[:a!]=[:A,:a,'a']

      c, a, m, s = Such::Thing.do_parameters([:a!])
      assert_equal([nil, [1,2,3],  {a:'a'}, ['a']], [c,a,m,s])

      b = ParentClass.new
      c, a, m, s = Such::Thing.do_parameters([b, :a!])
      assert_equal([b, [1,2,3],  {a:'a'}, ['a']], [c,a,m,s])

      h.clear
    end
  end

  def test_which_method
    assert_nothing_raised() do
      mthd = Such::Thing.which_method([], [:nope, :push, :wut])
      assert_equal(:push, mthd)
    end
  end

  def test_into
    # Via class method
    assert_nothing_raised() do
      ######################
      ### container :add ###
      ######################
      container = SuchClass.new
      item = SuchClass.new
      # container is empty
      assert_equal([], container.added)
      out = TestThing.capture_stderr{ Such::Thing.into(item, container) }
      assert_equal('', out)
      # container now has item
      assert_equal([item], container.added)
      # just gives warning if no container is given.
      out = TestThing.capture_stderr{ Such::Thing.into(item) }
      assert_match(/^Warning:/, out)
      #######################
      ### container :pack ###
      #######################
      container = PackSuchClass.new
      item = SuchClass.new
      # container is empty
      assert_equal([], container.added)
      assert_equal([], container.packed)
      out = TestThing.capture_stderr{ Such::Thing.into(item, container) }
      assert_equal('', out)
      # container now has item in packed
      assert_equal([], container.added)
      assert_equal([item], container.packed)
    end
    # Via new
    assert_nothing_raised() do
      container = SuchClass.new
      # item should put itself into container
      item = SuchClass.new container
      assert_equal([item], container.added)
    end
  end

  def test_do_method
    assert_nothing_raised() do
      a = []
      Such::Thing.do_method(a, :push, 1)
      assert_equal([1], a)
      Such::Thing.do_method(a, :clear) # checks that raises no errors
      assert_equal([], a)
      b = {}
      Such::Thing.do_method(b, :[]=, :a, 'A')
      assert_equal({a:'A'}, b)
      Such::Thing.do_method(b, :clear)
      assert_equal({}, b)
      Such::Thing.do_method(b, :[]=, [:a,'A'], [:b,'B'], [:c,'C'])
      assert_equal({a:'A',b:'B',c:'C'}, b)
    end
  end

  def test_do_methods
    assert_nothing_raised() do
      container = SuchClass.new
      item = SuchClass.new
      Such::Thing.do_methods(item, {does:'OK'}, container)
      assert_equal(['OK'], item.done)
      assert_equal([item], container.added)
    end
  end

  def test_do_config
    assert_nothing_raised() do
      p = Such::Thing::PARAMETERS
      h = p.to_h
      h.clear

      h[:OK] = {does:['OK','I','get','it']}
      obj = SuchClass.new
      out = TestThing.capture_stderr{ Such::Thing.do_config(obj, :OK, 'Ok'){true} }
      assert_equal('', out)
      assert_equal(['OK','I','get','it'], obj.done)
      assert_equal(['Ok'], obj.signals)

      # Arguments are not used int do_config, gives warning.
      out = TestThing.capture_stderr{ Such::Thing.do_config(obj, [1,2,3]) }
      assert_match(/^Warning:/, out)

      h.clear
    end
  end

  def test_do_links
    assert_nothing_raised() do
      item = SuchClass.new
      wontcallanyways = true
      Such::Thing.do_links(item, ['a','b','c'], wontcallanyways)
      assert_equal(['a','b','c'], item.signals)
    end
  end

  def test_new_arity
    # Nothing raised with correct arity.
    assert_nothing_raised() do
      # Blank takes nothing
      SuchClass.new
      SuchClass.new []
      # One takes exactly one
      OneSuchClass.new [1]
      # Many takes any
      ManySuchClass.new
      ManySuchClass.new []
      ManySuchClass.new [1]
      ManySuchClass.new [1,2,3]
    end

    # ArgumentError raised with incorrect arity
    assert_raise(ArgumentError) do
      SuchClass.new [1]
    end
    assert_raise(ArgumentError) do
      OneSuchClass.new
    end
    assert_raise(ArgumentError) do
      OneSuchClass.new []
    end
    assert_raise(ArgumentError) do
      OneSuchClass.new [1,2]
    end
  end

  def test_initialize
    assert_nothing_raised() do
      blank = SuchClass.new
      assert_equal(blank.done, [])
      blank.does(1); blank.does(2); blank.does(4)
      assert_equal(blank.done, [1,2,4])
    end
    assert_nothing_raised() do
      one = OneSuchClass.new ['A']
      assert_equal(one.v, 'A')
    end
    assert_nothing_raised() do
      many0 = ManySuchClass.new
      many1 = ManySuchClass.new ['A']
      many3 = ManySuchClass.new ['x','y','z']
      many  = ManySuchClass.new ['A'],['x','y','z']
      assert_equal(many0.v, [])
      assert_equal(many1.v, ['A'])
      assert_equal(many3.v, ['x','y','z'])
      assert_equal(many.v,  ['A', 'x','y','z'])
    end
  end

  def test_methods
    assert_nothing_raised() do
      blank = SuchClass.new does: 1
      one   = OneSuchClass.new ['A'], does: 2
      many  = ManySuchClass.new({does: 3}, ['x','y','z'])

      assert_equal([1], blank.done)

      assert_equal([2], one.done)
      assert_equal('A', one.v)

      assert_equal([3], many.done)
      assert_equal(['x','y','z'], many.v)

      # Quick overide test...
      blank2 = SuchClass.new({does: 1}, {does: 'a'})
      # Only does('a') happens:
      assert_equal(['a'], blank2.done)
    end
  end

  def test_link
    assert_nothing_raised() do
      blank = SuchClass.new('event'){true}
      blank2 = SuchClass.new('event1', 'event2'){true}
      assert_equal(['event'], blank.signals)
      assert_equal(['event1', 'event2'], blank2.signals)
      # Warns when no block is given...
      out = TestThing.capture_stderr{ SuchClass.new('event') }
      assert_match(/^Warning:/, out)
    end
  end

  def test_translation
    assert_nothing_raised() do
      p = Such::Thing::PARAMETERS
      h = p.to_h
      h[:A] = [1,2,3]
      h[:a] = {does: 'X'}
      h[:a!] = [:A,:a,'x']
      many = ManySuchClass.new(:a!){ true }
      assert_equal([1,2,3], many.v)
      assert_equal(['X'], many.done)
      assert_equal(['x'], many.signals)
      h.clear # restore to clear
    end
  end
end

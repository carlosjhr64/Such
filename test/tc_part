#! ruby
require 'test/unit'
require 'such/part'

module Such
class Abc
  attr_accessor :value
  attr_reader :parameters
  def initialize(*parameters)
    @parameters = parameters
    # just a mockup
  end
end

class A < Abc
  attr_accessor :b_B, :c_C
  def self.plugs = [:b_B, :c_C]
  include Such::Part
end

class B < Abc
  def message(k,v)
    @value = v if k == :b
  end
end

class C < Abc
  attr_accessor :d_D
  def self.plugs = [:d_D]
  def message(k,v)
    @value = v if k == :c
    super
  end
  include Such::Part
end

class D < Abc
  def message(k,v)
    @value = v if k == :d
  end
end
end

class TestPart < Test::Unit::TestCase
  def test_parts
    a = Such::A.new :a
    assert_equal [:a], a.parameters
    # Notice how it's setup to connect to Such::Thing objects
    assert_equal [a, :b!], a.b_B.parameters
    assert_equal [a, :c!], a.c_C.parameters

    # Messages are broadcasted to all.
    # It's up to each receiver to act accordingly.
    a.message :b, 'Hello'
    a.message :c, 'World!'
    assert_equal 'Hello',  a.b_B.value
    assert_equal 'World!', a.c_C.value

    assert_nil a.e_E
    assert_raises(NoMethodError){a.this_method_missing}

    a.message :d, 'Hail Mary Message!'
    assert_equal 'Hail Mary Message!', a.d_D.value
  end
end

#! ruby
require 'test/unit'
require 'such/parts'

module Such
  def self.subclass(name, klass, **kw, &block)
    [name, klass, kw]
  end

  module Thing
  end

  module Part
  end

  class Item
    include Thing
  end

  class Zingy
  end
end

class TestParts < Test::Unit::TestCase
  def test_make
    # Such::Zingy not a Such::Thing
    assert_raises(RuntimeError){Such::Parts.make(:Piece, Such::Zingy, :plug_Whatchamacallit)}

    # Plug must be in the form :key_class
    assert_raises(RuntimeError){Such::Parts.make(:Piece, Such::Item, :plug)}

    part, thing, kw = Such::Parts.make(:Piece, Such::Item, :a_Abc, :xyz_Xyz)
    assert_equal :Piece, part
    assert_equal Such::Item, thing
    assert_equal Hash, kw.class
    h = {attr_accessor: [:a_Abc, :xyz_Xyz], include: Such::Part}
    assert_equal h, kw
  end
end
